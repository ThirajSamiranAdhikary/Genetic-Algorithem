# -*- coding: utf-8 -*-
"""IMIT_IS_Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yGii9cOuZ3i2cVxRw8--7fgpPgPZEAwN
"""

import numpy as np
import random

c1=[1,0,0,0,0,0,0,1]
c2=[1,0,0,0,0,0,0,1]
c3=[1,0,0,0,0,0,0,1]
c4=[1,0,0,0,0,0,0,1]
c5=[1,0,0,0,0,0,0,1]
c6=[1,0,0,0,0,0,0,1]
c7=[1,0,0,0,0,0,0,1]
c8=[1,0,0,0,0,0,0,1]
c9=[1,0,0,0,0,0,0,1]
c10=[1,0,0,0,0,0,0,1]
p=[c1,c2,c3,c4,c5,c6,c7,c8,c9,c10]
totalDsitance=[0,0,0,0,0,0,0,0,0,0]
percentage=[0,0,0,0,0,0,0,0,0,0]
distance =np.array([[0,0,0,0,0,0,0,0],[0,0,5,10,15,20,10,5],[0,5,0,15,20,5,15,10],[0,10,15,0,5,10,20,15],[0,15,20,5,0,5,10,20],[0,20,5,10,5,0,10,5],[0,10,15,20,10,10,0,10],[0,5,10,15,20,5,10,0]]) 
generationFitnessValue=[]
iterationNumber=[]

def createChromosomes(population):
    for i in range(len(population)):
        y=1
        while y<len(p[i])-1:
            z=random.randrange(2,8)
            if z in p[i]:
                continue
            else:
                p[i][y]=z
            y=y+1
    print("Generation")
    for i in population:
        print(i)

def calculateFitnessValue(population):
    print("Distance between cities")
    print(distance)
    for i in range(len(population)):
        y=0
        sum=0
        while y<len(p[i])-1:
            d=distance[p[i][y],p[i][y+1]]
            sum=sum+d
            y=y+1
        totalDsitance[i]=sum*-1

    print("Fitness Values of Chromosomes:",totalDsitance)

#fitness value calculation
    sum2=0
    for i in totalDsitance:
        sum2=sum2+i 
    generationFitnessValue.append(sum2)
    print("Total fitnes value of population: ",sum2)

    for i in range (len(percentage)):
        percentage[i]=totalDsitance[i]*-1/sum2*10

    print("Fitness percentage of the population: ",percentage)

def selectionFunction(percentage,p):
    maxValue=None
    minValue=None
    maxIndex=[]
    minIndex=[]

    for i in range(10):
      if maxValue == None or percentage[i]>maxValue:
        maxValue=percentage[i]
    
    
    
    for i in range(10):
      if minValue == None or percentage[i]<minValue:
        minValue=percentage[i]
    
    
    for i in range(10):
      if maxValue==percentage[i]:
        maxIndex.append(i)
    
    for i in range(10):
      if minValue==percentage[i]:
        minIndex.append(i)
    
    for i in range(len(minIndex)):
      p[minIndex[i]]=p[maxIndex[0]]
        
    print(maxValue,maxIndex)
    print(minValue,minIndex)
    print("Polulation after selection:")
    for i in p:
        print(i)

def crossOver(p):
    c=[]
    c2=[]

    for i in range(0,len(p),2):
        for j in range(4,7,1):
            c.append(p[i][j]) 
        
        for j in range(4,7,1):
            c2.append(p[i+1][j])
    
        for j in range(3):
            p[i].remove(c2[j])
       
        for j in range(4,7,1):
            p[i].insert(j,c2[j-4])
     
        
        for j in range(3):
            p[i+1].remove(c[j])
        
        for j in range(4,7,1):
            p[i+1].insert(j,c[j-4])
        
        c.clear()
        c2.clear()
    print("population after cross over:")
    for i in p:
        print(i)

def mutation(p):
    minValue=0
    minIndex=[]
    c3=[]
    for i in range(10):
      if minValue == None or percentage[i]<minValue:
        minValue=percentage[i]
    print(minValue)
    
    for i in range(10):
      if minValue==percentage[i]:
        minIndex.append(i)
    print(minIndex)
    
    for i in minIndex:
      print(p[i])
      c3=p[i][4:7]
      for y in range(3):
        p[i].remove(c3[y])
      print(p[i])
    
      for x in range(3):
        p[i].insert(x+1,c3[x])
    
      print(p[i])

def firstCall():
    createChromosomes(p)
    calculateFitnessValue(p)

def secondCall():
    selectionFunction(percentage,p)
    crossOver(p)
    calculateFitnessValue(p)
    mutation(p)
    calculateFitnessValue(p)

firstCall()

for i in range(50):
    secondCall()

iterationNumber.clear()

print(generationFitnessValue)
import pandas as pd
import matplotlib.pyplot as plt

for i in range(201):
  iterationNumber.insert(i,i)

data={
    "FitnessValue":generationFitnessValue,
    "Iteration":iterationNumber}

df = pd.DataFrame(data)

x = df["Iteration"] 
y = df["FitnessValue"]


plt.plot(x, y, 'o', color='red')

print(df)